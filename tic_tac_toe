def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_win(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)):
            return True

    for i in range(3):
        if all(board[j][i] == player for j in range(3)):
            return True

    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_board_full(board):
    return all(board[i][j] != ' ' for i in range(3) for j in range(3))

def get_move(player):
    move = input(f"Player '{player}', enter your move (row[1-3] col[1-3]): ")
    row, col = map(int, move.split())
    return row - 1, col - 1

def play_tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    players = ['X', 'O']
    current_player = 0

    print("Welcome to Tic Tac Toe!")
    print_board(board)

    for _ in range(9):
        player = players[current_player]
        row, col = get_move(player)

        while not (0 <= row < 3 and 0 <= col < 3 and board[row][col] == ' '):
            print("Invalid move. Try again.")
            row, col = get_move(player)

        board[row][col] = player
        print_board(board)

        if check_win(board, player):
            print(f"Player '{player}' wins!")
            break

        if is_board_full(board):
            print("It's a draw!")
            break

        current_player = (current_player + 1) % 2

if __name__ == "__main__":
    play_tic_tac_toe()
